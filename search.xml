<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Govendor使用方法]]></title>
    <url>%2F2019%2F01%2F08%2FGovendor%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[安裝govendor1go get -u -v github.com/kardianos/govendor 生成vendor專案完成後，可以使用下列指令生成vendor目錄，並在該目錄生成vendor.json，作用類似node.js的package.json，記錄專案所使用的套件及版本。12cd projectgovendor init 加入專案所使用的套件將專案所使用的套件及版本資訊加入vendor.json之中，並將所使用到的套件下載一份至vendor目錄中。1govendor add +e 在.gitignore中加入以下內容，為了避免將vendor目錄中的套件上傳至git儲存庫佔空間。.gitignore12/vendor/*!/vendor/vendor.json 拉取依賴套件到vendor其他人從git下載專案後，便可以利用vendor.json重新安裝專案所需套件到vendor。1govendor sync]]></content>
      <categories>
        <category>程式</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python-字串]]></title>
    <url>%2F2018%2F12%2F27%2Fpython-%E5%AD%97%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[用str()來轉換資料類型1234&gt;&gt;&gt; str(3.14159)&apos;3.14159&apos;&gt;&gt;&gt; str(True)&apos;True&apos; 用 + 來結合12&gt;&gt;&gt; &apos;hello &apos; + &apos;world&apos;&apos;hello world&apos; 用 * 來複製12&gt;&gt;&gt; &apos;Na &apos; * 4&apos;Na Na Na Na &apos; 用[]來擷取字元12345&gt;&gt;&gt; str = &apos;abcdefg&apos;&gt;&gt;&gt; str[0]&apos;a&apos;&gt;&gt;&gt; str[3]&apos;d&apos; 用[開始：結束：間隔]擷取子字串 [:] 擷取整個序列 [start:] 擷取從start到結束 [:end] 擷取從開始到end前一個 123&gt;&gt;&gt; str = &apos;abcdefg&apos;&gt;&gt;&gt; str[:3]&apos;abc&apos; [start:end] 擷取從start到end前一個 [start:end:step] 擷取從start到end前一個，跳過step字元123&gt;&gt;&gt; str = &apos;abcdefg&apos;&gt;&gt;&gt; str[::2]&apos;aceg&apos; 用len()來取得長度123&gt;&gt;&gt; str = &apos;abcdefg&apos;&gt;&gt;&gt; len(str)7 用split()來分割split()函式用來分割字串為串列，使用時要給分隔符號字元 字串.split(分隔符號) 123&gt;&gt;&gt; str = &apos;a,b,c,d,e,f,g&apos;&gt;&gt;&gt; str.split(&apos;,&apos;)[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;] 用join()來結合join()函式用來結合串列為一個字串 字串.join(串列) 字串做為串列結合時的連結字元 123&gt;&gt;&gt; str = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;]&gt;&gt;&gt; &apos;,&apos;.join(str)&apos;a,b,c,d,e,f,g&apos; 用replace()來替換 字串.replace(被替換字串,替換字串) 123&gt;&gt;&gt; str = &apos;hello world&apos;&gt;&gt;&gt; str.replace(&apos;hello&apos;,&apos;hi&apos;)&apos;hi world&apos;]]></content>
      <categories>
        <category>程式</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python-數字]]></title>
    <url>%2F2018%2F12%2F26%2Fpython-%E6%95%B8%E5%AD%97%2F</url>
    <content type="text"><![CDATA[組成python支援 整數 與 浮點數 運算整數與浮點數可以用下列的數學運算子來進行運算 運算子 說明 範例 結果 + 加法 1+1 2 - 減法 2-1 1 * 乘法 3*5 15 / 浮點數除法 9/4 2.25 // 整數除法(小數點捨去) 9//4 2 % 模數(取餘數) 9%4 1 ** 乘冪 2**3 8 類型轉換整數要將其他python資料類型轉換成整數，可以使用int() 布林轉整數1234&gt;&gt;&gt; int(True)1&gt;&gt;&gt; int(False)0 浮點數轉整數1234&gt;&gt;&gt; int(3.14159)3&gt;&gt;&gt; int(1.0e4)10000 數字字串轉整數1234&gt;&gt;&gt; int(&apos;123&apos;)123&gt;&gt;&gt; int(&apos;-23&apos;)-23 int()無法處理含有小數點或指數的字串12345678&gt;&gt;&gt; int(&apos;3.14159&apos;)Traceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;ValueError: invalid literal for int() with base 10: &apos;3.14159&apos;&gt;&gt;&gt; int(&apos;1.0e4&apos;)Traceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;ValueError: invalid literal for int() with base 10: &apos;1.0e4&apos; 浮點數要將其他python資料類型轉換成浮點數，可以使用float() 布林轉浮點數1234&gt;&gt;&gt; float(True)1.0&gt;&gt;&gt; float(False)0.0 整數轉浮點數12&gt;&gt;&gt; float(3)3.0 數字字串轉整數1234&gt;&gt;&gt; float(&apos;123&apos;)123.0&gt;&gt;&gt; float(&apos;-1.5&apos;)-1.5]]></content>
      <categories>
        <category>程式</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python-變數與資料類型]]></title>
    <url>%2F2018%2F12%2F26%2Fpython-%E8%AE%8A%E6%95%B8%E8%88%87%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[資料類型python的基礎資料類型 布林(True與False) 整數(例如100) 浮點數(例如 3.14159) 字串(一串文字字元) 變數 在python中，所有東西都是用 物件 來實作的。(包含布林、整數、浮點數、字串，甚至大型的資料結構、函式與程式) 變數只是名稱，賦值只是指派一個名稱給含有該資料的物件而已123&gt;&gt;&gt; a = 7&gt;&gt;&gt; a7 查看某個物件的資料類型使用type(物件)12345678&gt;&gt;&gt; type(a)&lt;class &apos;int&apos;&gt;&gt;&gt;&gt; type(True)&lt;class &apos;bool&apos;&gt;&gt;&gt;&gt; type(3.14159)&lt;class &apos;float&apos;&gt;&gt;&gt;&gt; type(&apos;hello&apos;)&lt;class &apos;str&apos;&gt;]]></content>
      <categories>
        <category>程式</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python-安裝與執行]]></title>
    <url>%2F2018%2F12%2F26%2Fpython-%E5%AE%89%E8%A3%9D%E8%88%87%E5%9F%B7%E8%A1%8C%2F</url>
    <content type="text"><![CDATA[安裝至官網下載安裝檔安裝，建議安裝python3 安裝時，記得勾選將python安裝目錄加入path環境變數 安裝完成後，可以下列指令檢查是否成功安裝12$ python -VPython 3.7.2 執行互動式解譯器在命令列輸入python，使用互動式解譯器來執行小型python程式，這個方式提供一個互動式介面，讓你可以一行一行輸入程式，並馬上看到程式結果。12345$ pythonPython 3.7.2 (tags/v3.7.2:9a3ffc0492, Dec 23 2018, 22:20:52) [MSC v.1916 32 bit(Intel)] on win32Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; 文字檔將程式存在文字檔，通常文字檔使用副檔名.py，使用python加檔案來執行1$ python hello-world.py]]></content>
      <categories>
        <category>程式</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo筆記]]></title>
    <url>%2F2018%2F12%2F25%2Fhexo-setting%2F</url>
    <content type="text"><![CDATA[安裝 Node.JSHexo 是 node.js 的一個套件，所以使用 Hexo 前要先安裝 node.js 安裝 Hexo使用npm安裝hexo1npm install hexo-cli -g 初始化部落格123hexo init blogcd blognpm install 啟動網站，預設以localhost:4000啟動1hexo server 安裝 Hexo Git將hexo部署至github的套件12cd blognpm install hexo-deployer-git --save 將Hexo部署至Github新增一個新的儲存庫，名稱為 yourname.github.io再來到 blog 資料夾，編輯網站設定文件(_config.yml)，開啟之後，拉到檔案最底部，可以看到12deploy: type: 輸入以下資訊1234deploy: type: git repository: https://github.com/boyilai/boyilai.github.io.git branch: master 產生靜態文件並部署上 Github1hexo g -d 再來就可以上 https://yourname.github.io/ 查看是否部署成功 使用Next主題如何安裝主題，可參考官方教學文件 下載Next主題12cd blog$ git clone https://github.com/iissnan/hexo-theme-next themes/next 編輯網站設定文件(_config.yml)，將theme設定為next1theme: next 使用第三方服務DISQUS評論系統先至DISQUS新增欲使用服務的網站再到Admin-&gt;Settings-&gt;Sites，找出shortname最後編輯主題設定文件(themes/next/_config.yml)，將 disqus 下的 enable 設定為 true，同時提供 shortname。count 用於指定是否顯示評論數量。1234disqus: enable: true shortname: your_shortname count: true Local Search搜索服務文章摘要服務使用hexo-excerpt (自動產生摘要的插件)指令：1npm install hexo-excerpt --save 使用hexo-excerpt的原因：避免使用&lt;!-- more --&gt;手動截斷，省下審視版面的時間 不想使用auto_excerpt，不喜歡沒有截到一個段落結束的話，在網站設定文件(_config.yml)中設定摘要要顯示多少個一級html標籤中的內容12#Excerptexcerpt_depth: 5 Google分析閱讀量客製化設定讓NexT主題的Markdown H2自動產生底線在主題的css中添加自訂CSS[themes/next/source/css/_custom/custom.styl]1h2 &#123; border-bottom: 1px solid #cccccc; &#125; 添加前：添加後： 讓NexT主題的List不只有圓形在主題的css中將此行註解(大約在第55行)[themes/next/source/css/_custom/custom.styl]1//ul li &#123; list-style: circle; &#125; 修改前：修改後： 修改文章底部的那個#號的標籤修改模板/themes/next/layout/_macro/post.swig[/themes/next/layout/_macro/post.swig]12345678&lt;footer class="post-footer"&gt; &#123;% if post.tags and post.tags.length and not is_index %&#125; &lt;div class="post-tags"&gt; &#123;% for tag in post.tags %&#125; &lt;a href="&#123;&#123; url_for(tag.path) &#125;&#125;" rel="tag"&gt;# &#123;&#123; tag.name &#125;&#125;&lt;/a&gt; &#123;% endfor %&#125; &lt;/div&gt; &#123;% endif %&#125; 搜索rel=&quot;tag&quot;&gt;#，將 # 換成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;[/themes/next/layout/_macro/post.swig]12345678&lt;footer class="post-footer"&gt; &#123;% if post.tags and post.tags.length and not is_index %&#125; &lt;div class="post-tags"&gt; &#123;% for tag in post.tags %&#125; &lt;a href="&#123;&#123; url_for(tag.path) &#125;&#125;" rel="tag"&gt;&lt;i class="fa fa-tag"&gt;&lt;/i&gt; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt; &#123;% endfor %&#125; &lt;/div&gt; &#123;% endif %&#125; 修改後： 新增標籤頁可以參考 Next 官網的這篇教學 添加「标签」页面。 新增分類頁可以參考 Next 官網的這篇教學 添加「分类」页面 新增關於頁可以這篇教學 Hexo about页面怎么写 Next关于页面怎么设置 參考資料Hexo+GitHub，新手也可以快速建立部落格]]></content>
      <categories>
        <category>程式</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
